<?php

namespace Splio\WatchBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * User
 *
 * @ORM\Table(
 *     name="watch_user",
 *     uniqueConstraints={
 *         @ORM\UniqueConstraint(name="nickname_idx", columns={"nickname"})
 *     }
 * )
 * @ORM\Entity(repositoryClass="Splio\WatchBundle\Entity\UserRepository")
 */
class User
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(type="string")
     */
    private $nickname;

    /**
     * @var boolean
     *
     * @ORM\Column(type="boolean")
     */
    private $isSpecialUser;

    /**
     * @var DateTime
     *
     * @ORM\Column(type="date")
     */
    private $birthday;

    /**
     * @var string
     *
     * @ORM\Column(type="string", length=255)
     */
    private $firstname;

    /**
     * @var ArrayCollection
     * @ORM\ManyToMany(targetEntity="User", inversedBy="followings")
     */
    private $followers;

    /**
     * @var ArrayCollection
     * @ORM\ManyToMany(targetEntity="User", inversedBy="followers")
     */
    private $followings;

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set nickname
     *
     * @param string $nickname
     * @return User
     */
    public function setNickname($nickname)
    {
        $this->nickname = $nickname;

        return $this;
    }

    /**
     * Get nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * Set isSpecialUser
     *
     * @param boolean $isSpecialUser
     * @return User
     */
    public function setIsSpecialUser($isSpecialUser)
    {
        $this->isSpecialUser = $isSpecialUser;

        return $this;
    }

    /**
     * Get isSpecialUser
     *
     * @return boolean
     */
    public function getIsSpecialUser()
    {
        return $this->isSpecialUser;
    }
}
